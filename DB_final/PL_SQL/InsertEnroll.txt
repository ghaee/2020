CREATE OR REPLACE PROCEDURE InsertEnroll(
	p_s_id IN enroll.s_id%TYPE,
 	p_c_id IN enroll.c_id%TYPE,
 	p_c_id_no IN enroll.c_id_no%TYPE,

	p_c_day1 IN class_time.c_day%TYPE,
	p_c_stime1 IN class_time.c_stime%TYPE,
	p_c_etime1 IN class_time.c_etime%TYPE,

	p_c_day2 IN class_time.c_day%TYPE,
	p_c_stime2 IN class_time.c_stime%TYPE,
	p_c_etime2 IN class_time.c_etime%TYPE,

	result OUT VARCHAR2)
IS
	v_enroll_cnt NUMBER;
	v_personnel course.c_personnel %TYPE;
	v_c_unit course.c_unit %TYPE;
	v_s_unit students.s_unit%TYPE;

	OVER_PERSONNEL EXCEPTION;
	OVER_S_UNIT EXCEPTION;
	DUPLI_TIME EXCEPTION;

	CURSOR time_chk(v_s_id enroll.s_id%TYPE) 
	IS
	SELECT DISTINCT  e.s_id, t.c_day,t.c_stime,t.c_etime
	FROM class_time t
 	LEFT OUTER JOIN enroll e
 	ON e.c_id = t.c_id and e.c_id_no = t.c_id_no
 	WHERE e.s_id = v_s_id;
BEGIN
	BEGIN
		SELECT COUNT(c_id) INTO v_enroll_cnt 
		FROM ENROLL WHERE c_id = p_c_id and c_id_no = p_c_id_no;
	END;
	
	BEGIN
		SELECT c_personnel, c_unit INTO v_personnel, v_c_unit
		FROM COURSE WHERE c_id = p_c_id and c_id_no = p_c_id_no;
	END;

	BEGIN
		SELECT s_unit INTO v_s_unit
		FROM STUDENTS WHERE s_id = p_s_id;
	END;
	
	BEGIN
		FOR list IN time_chk(p_s_id) 
		LOOP
		
			IF(list.c_day = p_c_day1 OR list.c_day = p_c_day2) THEN 
				

				IF(p_c_stime1 BETWEEN list.c_stime AND  list.c_etime ) THEN
					
					RAISE DUPLI_TIME;
				END IF;
				IF(p_c_stime2 BETWEEN list.c_stime AND  list.c_etime ) THEN
					
					RAISE DUPLI_TIME;
				END IF;
				IF(p_c_etime1 BETWEEN list.c_stime AND  list.c_etime ) THEN
					
					RAISE DUPLI_TIME;
				END IF;
				IF(p_c_etime2 BETWEEN list.c_stime AND  list.c_etime ) THEN
					
					RAISE DUPLI_TIME;
				END IF;


				IF(list.c_stime BETWEEN p_c_stime1 AND  p_c_etime1) THEN
					
					RAISE DUPLI_TIME;
				END IF;
				IF(list.c_stime BETWEEN p_c_stime2 AND  p_c_etime2) THEN
					
					RAISE DUPLI_TIME;
				END IF;
				IF(list.c_etime BETWEEN p_c_stime1 AND  p_c_etime1) THEN
					
					RAISE DUPLI_TIME;
				END IF;
				IF(list.c_etime BETWEEN p_c_stime2 AND  p_c_etime2) THEN
					
					RAISE DUPLI_TIME;
				END IF;
			END IF;
		END LOOP;
		IF(v_enroll_cnt >= v_personnel) THEN
			RAISE OVER_PERSONNEL;
		ELSIF( v_s_unit < v_c_unit) THEN
			RAISE OVER_S_UNIT;
		ELSE
			INSERT INTO enroll VALUES(p_s_id,p_c_id,p_c_id_no);
			COMMIT;
			UPDATE course SET c_remain = v_personnel -1 WHERE c_id = p_c_id and c_id_no = p_c_id_no;
			COMMIT;
			UPDATE students SET s_unit = v_s_unit - v_c_unit WHERE s_id = p_s_id;
			COMMIT;
			result := '수강신청 완료';
		END IF;
		EXCEPTION
			WHEN OVER_PERSONNEL THEN
				result := '정원 초과로 신청할 수 없습니다.';
			WHEN OVER_S_UNIT THEN
				result := '수강 학점이 부족합니다.';
			WHEN DUPLI_TIME THEN
				result := '같은 시간에 듣는 수업이 있습니다.';
	END;
END;
/
